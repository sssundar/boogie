Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2016-07-01T19:36:35-07:00

====== sanity-check-hangouts ======
Created Friday 01 July 2016

**Get a hangouts session going, ignoring the display/doodle completely. Test effect of size & frequency on ordering & latency for programmatic messages.** 

From the Hangouts reference on "Writing Apps": //You can store approximately 1MB of data in the shared state object; each delta can be about 10K each. //Elsewhere they state that programattic delta updates can be at maximum 10 per second, with a suspension of 1 second if you exceed that. Expect 300 ms latency. 

So we have 10k, 10Hz to play with with a 300 ms delay. Assume 5Hz, 10k deltas. Allowing 10kBytes, and say in each byte we pack [0-128|bw] for a run, then we see we can take a 1080x1920 = 2,073,600 pixel image with many runs and at best turn it into 16,200 bytes. Not good enough. So we have a limited drawing area, or we use a coarser grid. Say, full screen but 1/4 resolution, which turns into 4050 bytes per delta. and even then, the deltas can be diffs, so even better. We'll start with full-updates, though, at 1/4 resolution and compression, expansion on either end.

The app itself can for now be a Hangouts app run from within Hangouts. I guess the Hangouts API isn't yet allowing other apps to call it.

What I'm seeing on a closer look is that it's not so straightforward to do it this way. 
	Skype has an API documentation that is hard for me to understand
	Hangouts allows internal apps only and I don't find it so simple to set up either
	
Seems to me my best bet for a quick setup is a quick and dirty Python web server with whitelisted inputs from post, which delivers content via GET requests with Javascript to refresh the page. As a first test, I mean. I can run the server on an old laptop or Pi 2 later. For now it'll get me off the ground with this. 

**Ok, so the idea now is: **
1) Set up a HTTP web server in Python with a programatically generated BMP (or a pixel snake) posted to and displayed at the index page, and refresh with JavaScript on the laptop to view
	Set up a POST form (hidden) and send coded text for decoding (with a whitelist and parsing at the server end) to demo error handling, and display the bitmap suggested.
2) Write a simple drawing app (post to website what is drawn, encoded, periodically). View it on a browser on my laptop and see resolution, timing, data usage, lag, etc.

I don't think there are too many security issues here so long as I filter the form input and have only these two interfaces - get and post, without additional parameters or scripts.

Ok, onto (1).

**Set up a HTTP web server in Python using Cherry Py that is publically visible with a domain mapping, which displays "Hello World."**

[*] Installed CherryPy using pip for Python 2.7 using sudo
[*] Found how to change socket mappings so CherryPy servers are publically visible
[*] Wrote Hello World script in Python on port 8080 allowing public connections
[*] Viewed webpage using my phone but only with local IP (192.168.1.5:8080)
	[x] Unable to view webpage using public IP because router apparently can't rewrite internal requests using the external IP
	[x] Unable to view webpage using public IP DNS lookup on Athimber's computer (different router)
	[ ] Can also try Patti's 3G connection on her table (no need, see below)
[*] Set up DuckDNS auto-updater on my Linux computer.
	[ ] Need to check if this works after a reboot (Not Done)
	[*] Not anymore - see below.
[*] Attempting to set up a simple HTTP web server in the cloud so that I don't have to worry about port forwarding on routers I don't own
	[*] Amazon AWS will cost ~100-220 a year depending on how far in advance I pay. 
	[*] It makes no sense in the long term. I can set up a server on my Pi and leave it running, and figure out port forwarding later.
	[*] But for now, it makes sense, even paid. I can use the free tier easily though for testing.
	[*] Created free-tier EC2 instance with SSH, HTTP, and HTTPS ports open, running Ubuntu 14.04 server LTS with limited storage. 
	[*] Downloaded .pem file for SSH but will not be syncing to Github, obviously.
	[*] https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html
	[*] Instance is running in N. California
		[*] DNS ec2-54-67-127-196.us-west-1.compute.amazonaws.com
		[*] ID i-1c115ca9
		[*] to SSH in, from the boogie security folder
			[*] ssh -i boogie-rev-a-1.pem ubuntu[[@ec2-54-67-127-196.us-west-1.compute.amazonaws.com]]
		[*] Success in SSH
		[*] sudo apt-get update & sudo apt-get install python-pip & pip install cherrypy and we're ready to start!
		[*] Use SCP for file transfer to home directory (~), from the boogie security folder
			[*] scp -i boogie-rev-a-1.pem [[../boogie/src/helloworld.py]] ubuntu[[@ec2-54-67-127-196.us-west-1.compute.amazonaws.com]]:~
		[*] Set up CherryPy and the Hello World code on HTTP (port 80), making sure to use sudo python .. for root priviledges to bind port 80
			[*] Works!! I can access the public IP (DNS) and see Hello World.
			[*] Let's push to Github to preserve this data. Also, let's back up the .pem file somewhere safe.

//Note, if I search for files or html documents that aren't there (e.g. index.html) CherryPy dumps traceback to the user. Not great.//

**Set up a HTTP web server in Python with a programatically generated image (of a pixel snake) posted to and displayed at the index page, and refresh with JavaScript on the laptop to view. Set up a POST form (hidden) and send coded text for decoding (with a whitelist and parsing at the server end) to demo error handling, and display the bitmap suggested.**

Here's the idea. 

[*] On the laptop, write a Python script that generates a pixels nake going from top left to bottom right, updating once every 200 ms (parametric size, frequency). 
	[*] See src/image_size_tests.py 
	[*] A 200x200 grid as a PNG zoomed to 300% is 5.7kB and looks like it could handle handwriting. Then again, a normal display now is 1080x1920, so that's 1/5 x 1/10 of the size of the screen, or almost 1/50 of the resolution allowed by the screen. We'll have to play and see. But 5.7kB is reaching a fairly large size. Remember, with 10k images we're expecting about 5.5 hours of talk time for a 2 Gb data outbound to Amma's phone - well beyond her limit unless she's on WiFi (likely).
	[*] Notice at 5Hz this leads to about 240kbits per second required upload speed. That's pretty reasonable nowadays in America. What about India? Not sure. Let's try it.
	[*] P.S. 5Hz means my hard disk drive can't keep up with it - I see updates about once a second. Makes sense.
	[*] I feel this resolution/update frequency aren't going to be good enough. I think I'll need slower & larger. Problem is, Thatha tends to erase his board a LOT, and write quickly. Hm. 
	[*] Ok, let's see what the size is with text RLE, why not.
		[*] Well, with random images (worst case) RLE turns out to be 20kB on average. So that's unfortunate, because PNGs can represent this in 5.7kB. Presumably for other situations RLE does a lot better. We should try it on an image of handwritten text.
		[*] For instance, a random image PNG is 5.7k but a 200x200 written "Hi!" in BW is only 906 bytes. So even RLE will be ok here, I think. Let's try it.
		[*] Yep, the PNG is 906 bytes, and the RLE is 514 bytes. The difference isn't too much, but it shows handwriting isn't so bad as we thought, and we can play with a few types of compression algorithms! Of course, the tradeoff is between space/time. There are usually hardware compression/decompression algorithms for PNG deflate. The RLE needs to be done in SW so it'll be way slower most likely.
[ ] Set up the webserver so that it has a hidden post & get form with internal decoding, and so that it displays the png on the index. Keep things static for now.
	[*] http://docs.cherrypy.org/en/latest/tutorials.html#tutorial-1-a-basic-web-application
	[*] Well, I don't quite like the idea of POSTing files, as it seems annoying to do programmatically with a form submission. I know it's possible, but for now let's stick with RLE encoding/decoding. 
	[*] Ok, so I'll use put, get and have python scripts on either side updating and saving files to disk. One will put a sequence of handwritten '1,2,3,4,5' in sequence, RLE of course, and the other will parse it right back out on the server side, converting it to an image that is displayed. The page should refresh via html or javascript. 
	[*] So screw the RESTful API. Let's just use one function to take a text argument, and another to deliver an image to the screen.
	[*] I did find a reference for how to stream files byte by byte to disk on the server side. That might be more useful later.
	[*] Ok, lets assume a text string RLE encoded with bytes of the form 0-128 | bw, b = 0, w = 1. Then using sys.byteorder in Python to confirm both my laptop & the EC2 instance are little endian, which I guess doesn't matter for single characters..
	[*] Now: setting up webserver.
		[*] Made a ~/public/images directory and placed the barebones.py CherryPy script in [[~/]] as well for local testing
		[*] Without the response header saying it's text, I'm seeing 0.2 second refresh and HTML as expected
		[*] With a picture in the public/images folder, I see the image. It flickers annoyingly. Something will have to be done in the app probably.
		[*] Now, setting it up on EC2.. works as expected.
			[*] Had to install PIL as Pillow
[*] Use python's equivalent of wget for post to programattically post the snake and watch it evolve, to see what frame skipping, etc. look like. Play with update frequencies, resolution (encoding size). See what Amazon's usage statistics look like just for kicks.
	[*] Actually, playing with 0-5 instead of snake. Just want to see updates, skipping.
	[*] Always test locally first.. easier.
	[*] Encoding the run lengths as a 0x00-0xFF was a bad idea. Some of those aren't valid unicode characters. So I should do this: double the size to about 1kB for this, have the first character be the first color ('b' or 'w') and we know it toggles after that. Therefore the rest can just be the 0xXX encoding.
	[*] This did it. I definitely get skipping in EC2 with 200 ms POSTs. If I slow it to 2 second updates, there's no skipping. 
	[*] Deadline:** July 3rd afternoon.**
[*] Work on a basic design for the doodle app - e.g. just drawing. No Skype. 
	[*] Had to install a few extra (older) SDKs to Android Studio to get layout rendering to simulate
	[*] Ok, followed steps more or less. 
	[*] Gradle build time is obscene (>@ hours). Fixed by changing build-tools, SDK version.
	[*] Don't seem to have Android debug bridge installed.. oh, Google dropped support for 32 bit systems. Whoops. Stackoverflow to the rescue.
	[*] Laptop/Android Studio recognize Nexus 7 fine now. 
	[*] Looks awesome. Some issues, noted below. Erasure works fine. 
	[*] Added no autorotate. No screen erasure now except with back button & erase button. Can disable back button later.
[*] Let's now work on getting a bitmap RLE'd and sending out via HTTP post/put.
	[ ] Bitmaps in Android have a built in PNG compression and downsampling function, so that's great. There are also ways to send PNGs via POST. Seems like it'd be worth trying RLE first, then defaulting to that. 
	[*] Let's first set up a 1 second interrupt
	[*] Downsample the bitmap immutably to 200x200, and compute the RLE in color,run,run,run format.
	[*] Figure out HTTP post in Android
	[*] Build, test it on the Nexus/Browser after spinning up the EC2 instance. Works!
	[*] Success on this is just.. get it working, fast. I want to see about resolution & bandwidth, lag, usability, clunkiness factor, ASAP.
	[*] Deadline:** July 5th evening**
[*] Ok, there is massive lag. At least 2 seconds, even with http-gets at 0.2seconds and http-post at 0.4 seconds. Looking at the network traffic on the Android monitor it's clear the processing is taking about 1 second on the tablet, so we have 1 second delay there, followed by 300 ms lag, followed by up to 0.2 seconds lag on our end on the browser, so duh it's taking 2-10 seconds to update. Not great. 

[*] Based on what I've seen so far, if VoIP can handle 64kbps+ streaming **real time with <0.5s detectable delay**, I should be able to find a way to speed this up a lot and make it more reliable. This is the priority, because the rest of it - an app that receives data, handshakes, VoIP, speakers, these are solved problems. I can handle that later. 
[*] Test paid options like ScreenMeet with a doodle app to see how much better things can get
	[*] Several thoughts shown below, but VERY easy to use, and certainly cheaper than EC2 instance. Might be worth it. Should show Patti and see what she thinks of using it, and try to teach Thatha too.

[*] First priority now is finding out where bottlenecks are. When the screenshare is usable, with consistent <1s delay, then we can move onto other functionality. "Definition of Success"
	[*] I need to have a log on the webserver to see how often post data is received, and flags to say whether there is overlap. I should view these via less on the server itself.
		[*] Maybe sending out data every 0.4s is overloading the server or typing up the file we're trying to display on the webserver index
			[*] Check if server post-complete-post overlap happening?
		[*] No, with 2 second delays we see 30 ms processing delays for post data -> png conversion on my laptop and 6-7 ms on the EC2 instance. This is not the bottleneck.
		[*] On the EC2 instance, when I log start time differences between 2-second delayed post requests from my laptop, I see mostly 2.5 second differences between POST requests, and every once in a while 3.4, 7, 12.5 seconds - somewhat rarely, but as we know from the UI tests, clearly enough to be visible and jarring.
		[*] So the issue in lag delay/variability is almost certainly between Android/Server and is only made worse by the increased processing the Android system has to do.
		[*] Ok.. let's try and make sense of these numbers. We're sending out data in POST requests every 2 seconds. We're seeing requests at the server every 2.5 seconds. One would think if I sent things out periodically, I'd receive them with the same period. 
			[*] Well, that's not strictly speaking true. Technically I am sleeping 2 seconds in between processing events in the test_barebones.py code. So if all that processing took 2.5 seconds the math'd work out. Then we'd just need to explain the random LONG delays.
			[*] Let's do the same test again locally (127.0.0.1) to see if there's still a 2.5 s delay
				[*] No, it's 2 seconds and change in ms. This means something about HTTP post to remote addresses (not just loopback) is adding 500 ms delay (maybe just TCP, and losses, that's how long it takes)
			[ ] Ok, locally, let's check start of processing post-sleep & end of HTTP post locally, then also to the webserver (in test_barebones.py)
				[*] Locally it is never more than 40ms for HTTP Post
				[*] Remotely, here's what I notice. Yes, HTTP Post on the local source takes about 0.5 seconds. Sometimes it takes as much as 5 seconds, often 1 second, but mostly 0.5 seconds. On the server side, the same timings turn into whatever the local send time was + 0.5 seconds. This is because I ask the system locally to wait 0.5 seconds before sending another data packet out AFTER it's sent the POST data. This is actually unnecessary, we could keep it in a tight loop to speed up the response.
				[*] So apparently HTTP post sending is where the delay comes in - sometimes it takes forever locally and these blips might be a part of life with HTTP.
				[*] Really speaking we don't know whether the issue is in the EC2 connection or the transmission from my laptop. Something about that connection seems to sometimes fail horribly, or take a while. It's surprsing that 500 characters take 0.5 seconds to send - thats 1 char/ms or 8 bits/ms or 8000 bps or 8kbps. That's really low. 
				[*] Let's try the same timing while I have pulled the page up.
					[*] Seems fine. Removed all delays - works with about 2 Hz.
				[*] Here's what I think: priorities while you're in India:
					[*] **UI, the feel, VoIP + drawing + making that seamless for him + remote update, troubleshooting.**
					[*] ~ 0.5 seconds to the server + 0.2 seconds to the phone gives about a 1 Hz update. That's good enough for now. We can play with **diffs/timeouts/retries** to speed it up later, when you aren't around Thatha, or just if you have time. But for all you know VoIP is going to slow this down considerably - let's get it end-to-end to see, then optimize. Even poor function (this, or wrt UI for thatha, screenmeet) are better than nothing.
	[x] Internet connectivity checks periodically - how often does it "cut off?" **Not doing right now.**
	[*] Are UDP & video game tips (forward projection) worthwhile? How to set up a UDP server? If processing time is the killer, is it worth sending over only blocks that change, and breaking up the system into 16-32 blocks assuming thatha doesn't write too fast? That won't deal with the sudden 10s delays, but it will halve the time over TCP, no, at the cost of less reliability? 
		[*] Well, the fact that it takes 10x as long via TCP as UDP says there's loss in the channel. Let's leave it as TCP unless it's truly unusable. The first goal is end-to-end function and a usable UI, then we'll worry about speeding things up.
	[ ] Get a **persistent** App for sender/receiver without any background thread delays except for processing/networking. 
		[*] For the tablet side - get a timing library & print logs
			[*] Track start of start of sampling, all processing time, HTTP post time, and both, separately. Just to Debug logs, for visual scan
			[*] Also keep the logs (cleared on start in code) on the server side.
		[*] Well, logs show mostly 500 ms transfers to the server (and the server has a few 10s of ms processing time) so we need a client app to show us get timing, no?
		[*] Problem is we get OFTEN 3-6 second delays. I think it's because I'm running on a background thread and so Android is deprioritizing it.
			[*] Changing thread priority to foreground still makes it wait 6 seconds every few seconds. That's our issue.
			[*] Let's make it an URGENT thread. I don't care about responsivity outside this app, after all.
			[*] THREAD_PRIORITY_URGENT_DISPLAY makes the base delay 1.3 seconds, but it's consistent, and the UI doesn't appear to suffer.
			[*] No, still have 6 second delay issue, sometimes twice in a row.
			[*] Noticed a few things: apparently the HTTPUrlConnection has silent retry of post requests. Might be worth removing that, as it's faster to just send a new one!
				[*] Using chunked request + including content length in bytes fixes the problem. Even on Android the network op takes 500 ms and the processing takes 30 ms. 
				[*] **Now I am getting 500 ms consistent transfer out of the tablet. I saw this before, then it deteriorated. Maybe threading issues? Well, for now let it be.**
			[x] Also might be worth using a different library (OkHTTP fixed silent try in April 2015, or Volley?)
				[*] No need
			[*] Also should close connections, maybe the giant wait is garbage collection!
				[x] **Only closing once - what about other times?**
	[*] Then install this persistently, and play with Thatha Patti so they get used to Android and drawing on it. Note down UI bugs, issues Thatha has, and observed delay.
		[*] Generate APK in build toolbar, then adb install ../../../Documents/boogie/source_revision_a/app/build/outputs/apk/app-debug.apk 
		[*] or just email it to the Android device and uncheck 'unknown app install' in settings
	[*] Deadline:** July 8th by 4 PM. Didn't get to everything but close enough.**

[*] Yep, wow. I have barely worked on this in the last 6 days. Learned a lot by playing with Thatha - tons of notes to transfer. But bad show.
[*] Need a stylus (ordered the Cosmonaut & the Bamboo 3/Amazon etc.) just to have a few to play with. Gloves will help Thatha avoid touching the screen in multiple places. 
	[*] Bamboo delivery failure. Ordered Griffin instead - youtube reviews show people writing chinese, good control.


[ ] Decided the UI/UX control offered by a personal SIP server was worth the hassle. Skype URIs are a possibility but if things go wrong it's hard to get feedback to Thatha.
	[*] Therefore immediate priority is to set up a SIP server & a simple VoIP app between two Android clients to test quality. Server should be in the cloud.
	[*] Using Kamailio SIP server (open)
		[*] sudo apt-get install kamailio worked fine in Ubuntu 14.04 LTS (Trusty AMD64 for x86_64 arch)
		[*] Also installed mysql modules, tls module, as per Skype-Voip-SIP tutorial. Had to update package listings with deb key for Kamailio
		[*] Added RTPproxy as well as per tutorial
		[*] Installed mysql server and set root password (noted elsewhere)
	[*] looks like the reason for having a server is because mobile phones are mobile, and the ip address can change, so the two clients register with the server and this makes them reachable by the other
		[*] I suppose what I really want is to set up a redirect server
	[*] Set up users 'sush' and 'mani' on the SQL database for the server. Passwords logged elsewhere. 
	[*] Made sure kamctlrc had amazon ec2 DNS name
	[*] Have some 'on startup commands' to run if the server ever goes down - check the tutorial for 'skype-like in under an hour'
		[*] Whoops, turns out Ubuntu apt-get installs Kamailio somewhere other than [[/usr/local/lib64...]] so dpkg -L helped locate the packages, so we can set the right mpath= in the cfg file.
		[*] Mine is [[/usr/lib/x86_64-linux-gnu/kamailio/modules/]]
		[*] Some other odds and ends - the guide is dated, some rtp_proxy commands needed to be changed.
		[*] That did it - it starts at least.
			[x] For now, no NAT traversal or RTP proxy - I assume amazon EC2 is making life easy here till proven otherwise
	[ ] Well, issue with checking if processes are running, a .fifo file is not found
		[*] removed "WITH NAT" from kamailio.cfg file just because i don't intend to use it just now (will definitely need it if I run this on a Pi2 at home down the road, but that's a year away)
		[*] the only .fifo I can see is in a kamctl folder near the modules folder in [[/usr/lib/x86_64-linux-gnu/kamailio/kamctl/...]]
		[*] So I'll direct to that (changes made to kamailio.cfg & kamctlrc files.
		[*] Not helping.
		[*] Well, that was a mistake. The FIFO file is really for storing external commands. I just overwrote an important file. I need to do a clean install now. Shoot.
	[*] Reinstalled, and just accepting for now that kamctl logging, control will not work for me. 
	[ ] Let's test along with the tutorial using Jitsi on my laptop & Padma Patti's laptop. Possibly need two different networks for this to work - Patti's, Athai's if need be.
		[x] Installing Jitsi 2.5 on my i386 machine why not (very old but likely stable)
			[x] No GUI working for me. Nuts.
		[*] Installed Linphone instead. Configuring for NAT/Gateway passing. For now, on Linux Mint, just used DuckDNS to get my router's public IP and set that. 
		[x] Not registering with Kamailio server on EC2 - taking a closer look, seems like it's listening on its PRIVATE IP. But.. that shouldn't matter, Amazon should figure that out.
			[x] But I have a no response timeout. This is on my laptop - and on my phone, it looks like.
		[x] Using uPNP for NAT port forwarding. Fixed 5060 port for UDP in server for SIP. Configured server with DNS names - possible issue. Finds it fine on the internal side. Not so well on the external side.
			[x] Didn't help
		[x] Hmm.. I need to see what my server is seeing. I need to get kamctl working.
			[*] Tried setting ERROR: Error opening Kamailio's FIFO [[/var/run/kamailio/kamailio_fifo]] permissions to 776 so it's always writable. Didn't help.
			[*] The config files are correct in this - maybe the module isn't being loaded?
			[*] No, it is.
			[*] tried modifying modparam without luck. 
			[*] http://fossies.org/linux/kamailio/utils/kamctl/kamctl.fifo suggests a test for existence (writeability) is done on the FIFO file, which is a bit weird if it doesn't exist. That might be the failure point. I will create the file manually.
			[x] Nope, that didn't help. Same issue - file is deleted when I start the server.
		[x] Ok, permissions issues. Did a clean purge of kamailio & mysql. Going to start over. This time, installed, and changed settings in [[/etc/default/kama..]] so it runs as ROOT.
			[x] Added root and ubuntu to kamailio group, running as sudo -s (root). Nothing.
			[x] Also added a lot more memory - 256Mb shared RAM and 32 Mb private.
			[x] Also tried changing startup options in kamctlrc script, and uncommenting a lot of default settings
			[x] Also tried changing all script locations to tmp/ which has all permissions, why not.
		[*] Ok, that's it - something is weird about this and it's not yet worth troubleshooting further. Let's find an alternative. JUST UDP SIP.
			[*] OverSIP
			[*] HERE: https://www.opensips.org/Documentation/Tutorials-GettingStarted
				[ ] See downloaded tutorial
			[*] AND: https://www.sipwise.org/news/technical/byov-services-1/
			[*] Commands (from tutorial video for 1.8, but I am installing LTS 2.2 version)
				[ ] sudo -s
				[ ] cd [[/usr/]]local/src/
				[ ] git clone https://github.com/OpenSIPS/opensips.git -b 2.2 opensips_2_2
				[ ] install flex, bison, libncurses5, and mysql client development libs (see video)
				[ ] Installing in [[/usr/local/proxy]] and src in [[/usr/local/src]]
				[ ] installed mysql-server, common, and client  and set up root user password
				[ ] Did NOT set up registrant table. 
				[ ] Set up security group in Amazon EC2 for the instance with ports 5060 open for inbound TCP and UDP traffic.
				[ ] Shutdown and rebooted instance.
				[ ] Edited config file with listen=tcp/udp: PRIVATE [[DNS:5060]] advertise [[PUBLICDNS:5060]]
					[ ] listen=udp:"ip-172-31-12-68.us-west-1.compute.internal":5060 as "ec2-54-$...
					[ ] listen=tcp:"ip-172-31-12-68.us-west-1.compute.internal":5060 as "ec2-54-$...
					[ ] Quotes matter.
				[ ] Starts. Logging unclear - checking [[/var/log/opensips.log]] - CREATED! LOGGING WORKS! WOOOOOT. No registration or users, of course, but we can add that in later by following the video again.
				[*] Great.
			[ ] Now to easily register users and such, and configure the opensips server, the tutorial requires a basic Apache server.
				[ ] Cloned https://github.com/OpenSIPS/opensips-cp/tree/master into an apache [[/var/www]] unconfigured as opensips-cp
				[ ] Whitelisted [[/var/www/opensips-cp/web]] using [[/etc/apache2/apache2.conf]] and install guide http://controlpanel.opensips.org/
				[ ] Gave [[/var/www/opensips-cp]] permissions to www-data
				[ ] Whoops, mysql db password needs to be root password as user is root
				[ ] That did it. Ok, now we have this on port 80. Let's get it on another port so we reserve HTTP for the screenshare. 
				[ ] Updated [[/etc/apache2/sites-available/000-default.conf]] so listen on 8080 and direct to [[/var/www/opensips-cp/web]] 
				[ ] Let's update the server security groups on EC2 management console & restart the apache webserver & sip server, of course.
				[ ] Just had to update [[/etc/apache2/ports.conf]] and sites-available/000-default.conf to point to the above, and port 8080. 
				[ ] http://ec2-54-67-127-196.us-west-1.compute.amazonaws.com:8080/ is our new control panel from remote hosts.
				[ ] Ok, still can't register with linphone, but nmap on my laptop shows port 5060 sip is open on the remote server, at least.
				[ ] Debugging: https://www.opensips.org/Documentation/Tools specifically ngrep for listening on port 5060
					[ ] Linphone is absolutely sending packets to the right address (when I try to register) and the server is receiving them for sure.
					[ ] Server is saying " 401 Unauthorized" and I see this on linphone as well
					[ ] Set a default sip domain in opensipsctlrc so i could check if users added using CP were actually on the local tables.
						[ ] both sush, mani exist.
					[ ] Hm.. perhaps something to do with password hashing, then? 
					[ ] Try to view www_auth return code: http://opensips-open-sip-server.1449251.n2.nabble.com/unauthorized-401-td7592466.html
						[ ] With return codes described here: http://www.opensips.org/html/docs/modules/devel/auth_db.html#id293676
					[ ] Use ngrep -W byline -td any . port 5060 and tail /var/log/opensips.log
					[ ] Return code is -4, which means "-4 (no credentials) - credentials were not found in request;"
					[*] This means the problem is on linphone's end. Weird.
					[ ] Well, let's try. Let's use http://tomeko.net/other/sipp/sipp_cheatsheet.php?lang=en (sipp) to test with complete control, and see if registration CAN succeed
						[ ] Need to format inputs like: http://sipp.sourceforge.net/doc/reference.html#SIP+authentication
						[ ] Building with ability to authorize: screw it, used package manager and found "sip-tester" which is the same as sipp
						[ ] sipp ec2-54-67-127-196.us-west-1.compute.amazonaws.com:5060 -sf REGISTER_client.xml -inf REGISTER_client.csv -m 1 -l 1 -trace_msg -trace_err 
							[ ] UDP with 1 socket by default
							[ ] XML and CSV base downloaded from tomeko.net
							[ ] That works fine now. It was formatting.
						[ ] Whoops, build with openssl support for auth. https://sourceforge.net/p/sipp/mailman/message/32849123/ and install libssl-dev
						[ ] Ok, well now it tries, but times out which is new - no 401 response.
					[ ] Let's view with ngrep (server) + ssip (laptop) at the same time. It is it doing what I expect?
						[ ] Hm.. I am getting a 483 too many hops error. What appears to be happening is the message hits my public ip, gets routed to my private IP, then back to my public, then back to my private, and so on. Weird. I know the message is sent using 127.0.1.1 as the IP which points to my private IP in loopback, so that could be why..
					[ ] I feel like there's nothing inherently wrong with my server and it's just a lack of control that's causing my issues. It might be worth just trying a simple app.
			[ ] Ok, great, not realy making progress here either. On the one hand, I could pay a small fee for a container service as suggested on reddit, and use opensips without this public/private ip funniness. On the other hand, there are tutorials for Asterisk using a different linux distro on EC2. I'm going to try that. The goal, after all, is to get voice WORKING. Things like sip2sip are free but I have no control over downtime or whether I get cut off for excessive usage.
				[ ] http://wiki.sip2sip.info/projects/sip2sip/wiki/SipTesting
[ ] Ok, here's the plan now: the minimum functionality before I leave India must be
	[ ] Ignore security and authentication for the screen sharing - voip + video + practical testing first. Security (srtp, tls) can be added later. Security for handwriting even later. Maybe even integrated with SIP.
	[ ] Main screen where Thatha can pick available users. Large well separated pictures of users.
		[ ] One way handwriting with dots + gloves shared at 1Hz and training
		[ ] Stable audio over wifi-only, currently only to another android device - loud sound
		[ ] Large, clear notifications on call progress, failure, termination. Very obvious button to press to return to main screen at any time (either after failure or intentionally - e.g. hanging up) 
			[ ] E.g. if internet is slow, or registration fails, etc.
		[ ] Erase button, and "IO problem" button, and MAIN button, all on side panel.  Make them a big eraser, a big ear, and a big red X.
		[ ] Remote troubleshooting - like RDP (entirely controlled - app update, install, uninstall, etc.)
	[ ] Partner app with screen share + voice, ACCEPT CALL & HANGUP button on our end, and display IO problem button. Only Thatha can call us, we can't call him. 
	[ ] Logging on both ends of packet timings, so on. Exit after 5 minutes of touch inactivity. Return to main screen with presence info when call ends.
	[ ] Small, RT streaming video is a nice to have, entirely controlled by one end (me, amma). Should be able to see both himself and the other party. 
[ ] With this in mind, let's focus yet again on VoIP and getting it working robustly. This time let's try an Asterix Server which has been shown to easily handle EC2. If this too fails, we'll move onto a cloud service without NATting.
	[ ] I'm going to wipe the current instance and start with a fresh Ubunti Server one
	[ ] Public hostname
		[ ] ec2-54-183-116-184.us-west-1.compute.amazonaws.com
	[ ] Private hostname
		[ ] ip-172-31-3-160.us-west-1.compute.internal
	[ ] SSH
		[ ] sudo chmo 400 test_voip.pem
		[ ] ssh -i test_voip.pem ubuntu[[@ec2-54-183-116-184.us-west-1.compute.amazonaws.com]]
	[ ] Gosh darn it. Let's just use http://wiki.freepbx.org/display/FOP/Installing+FreePBX+13+on+Ubuntu+Server+14.04.2+LTS#InstallingFreePBX13onUbuntuServer14.04.2LTS-CompileandInstalljansson
		[ ] That's on Ubuntu 14.04 and appears current wrt dependencies. Buti it's not for AWS
		[ ] Use http://www.geek-tips.com/2015/01/11/asterisk-on-aws-linux/ for tips on AWS setup
	[ ] Wow, someone posted a script to set it up on a fresh Ubuntu instance on AWS. 
		[ ] See https://gist.github.com/KhasMek/a4e3c11b7b453095c0d0#file-amazon_ec2_freepbx_bootstrap-sh
	[ ] Great. But a massive installation script makes ssh unhappy - it times out. So we'll do it one at a time.
		[ ] On boot, FreePBX starts, but Asterisk doesn't. So I have to SSH in and type "asterisk" to start the daemon, then things work fine.
		[ ] Bunch of ports are not open - need to change security groups on EC2 settings.
		[ ] http://wiki.freepbx.org/display/PPS/FreePBX+Distro+First+Steps+After+Installation
		[ ] http://aliensgrin.com/2014/01/20/pbx-in-a-flash-piaf-on-amazon-ec2/
		[ ] https://wiki.asterisk.org/wiki/display/AST/Unable+to+connect+to+remote+Asterisk
		[ ] http://wiki.freepbx.org/display/FPG/STUN+Servers
		[ ] http://wiki.freepbx.org/display/FPG/Extensions+Module+-+SIP+Extension#ExtensionsModule-SIPExtension-Overview
		[ ] Ok, well, the server is up, now I need to test whether it's getting responses, what the error codes are, etc.
			[ ] I've set up two users, sush & mani, with secure passwords, and extensions using FreePBX.
			[ ] Next step is to check the Asterisk config files for Chan-SIP to see what it thinks the user/pwd should be.
			[ ] https://wiki.asterisk.org/wiki/display/AST/Creating+SIP+Accounts
			[ ] Ok, the server is seeing the pings from my phone but it is responding with "wrong password." But I copy pasted the extension password..
			[ ] No success yet, but now it's clear that setting up a sip extension and linking it to a user account is how to register a sip softphone. Therefore the extension = username in linphone + the password is the "secret." This should work. 
			[ ] The problem currently is my internet keeps dying. ping -c 2 google.com fails intermittently. Now it's working again. 
			[ ] sipp [[@ec2-54-183-116-184.us-west-1.compute.amazonaws.com|ec2-54-183-116-184.us-west-1.compute.amazonaws.com]]:5060 -sf REGISTER_client.xml -inf REGISTER_client.csv -m 1 -l 1 -trace_msg -trace_err 
			[ ] Ok, well, changed local IP settings since they're static for ec2 instances anyways. 
			[ ] Restarted asterisk service after: https://support.flowroute.com/customer/en/portal/articles/2121271-how-to-advertise-your-public-ip-in-your-sip-signaling-on-asterisk-based-pbxs
			[ ] Ok, well, SIPp says it can register successfully with my credentials [[(extension:pwd]]) so I don't see what LinPhone's problem is. I do notice for each registration event I get a message from the server's private IP which has unknown credentials, so that's weird. The SIPp test discards them and considers them errors.
			[ ] Well, it seems I send a message, get a 401 unauthorized, get a message with options (from no known call + the private IP), then send another message & get a 200 OK.
			[ ] Ok, I'm happy with this. Why isn't LinPhone? Screw it, I trust SIPp - the messages look reasonable. But I want to test voice to make sure known SIP clients are able to hear both ways - that's important. Let's try a different SIP client - Twinkle! Nope - known issues for me, found online too. Trying QuteCom in the repo.
				[ ] Wooh! I am now reachable. So it was the client. Sheesh. 
				[ ] Ok, let's get two of these running and see if a call goes through and what voice quality is like with KNOWN O(250 ms) latency each way to the EC2 server from India (http://www.cloudping.info/)
				[ ] Trying QuteCom on Linux Miny 17, 32 bit laptop (me) and CSipSimple on Android 5.1 smartphone (thatha)
					[ ] CSipSimple works too!! Both users are registered. Both users are reachable according to server. Didn't even need to enable STUN for the phone, but have now, and let's see if I stay registered. Yes, it's fine.
				[ ] Ok, I'm able to signal "busy" after an invite from the PHONE CALLING THE LAPTOP and the other way around. So signaling is working fine.
				[ ] Strangely when the laptop calls the phone, the ip address shows up as the private ip address of the server, not it's public address.
				[ ] However, if I try and connect the call, the logs show 20s+ timeouts, and eventually the phones disconnect with a 408 timeout error.
				[ ] Hm.. well, let's try using IP address as if they were static. http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-instance-addressing.html
				[ ] Hm. Every once in a while, it seems asterisk.ctl is deleted and recreated with the wrong settings and then FreePBX can't change the settings through the GUI. Oh well. 
				[ ] Ok, now I can't even ssh in. I think the upshot here is that while it'd be great to have so much control over how the call is started/ended, it's not worth the hassle and it's not leading to a robust solution in my hands in the timeframe allotted. So time to pull the plug and try Skype. I'm killing the instance.
				[ ] Oh, it's back up. Weird.
				[ ] I really just want to HEAR a call on this. 
				[ ] Some debug help:http://community.freepbx.org/t/freepbx-new-install-no-audio-in-or-out-ivr-audio-works/16578/15, e.g. how to access asterisk CLI via ssh
				[ ] Definitely seeing random traffic from unknown users
				[ ] WOW. It works fine (audio) now. The real issue appears to have been local network settings - in FreePBX general SIP settings, I had to use IFCONFIG under SSH to find the proper subnet. Then it just started working. Wow. Call quality is decent - volume is fine, that can be boosted, or speakers can be bought, but there is little echo and there is little distortion. Periamma heard my voice fine, and I heard hers, but Thatha had a hard time hearing the sound on my cell phone. 
					[ ] http://www.expressinterconnect.com/429/no-outgoing-sound-for-asterisk-on-amazon-aws-ec2/
				[ ] So now I can just leave the server running. I'm pretty sure there's no security, no encryption, but it'll have to do for now. 
	[ ] Next step is: get android apps talking (nexus -> huawei). We'll deal with websocket for Amma (now) and Balu mama (later) down the road.


[ ] Must play with drawing touches to allow hand rests not to screw things up - shouldn't be hard
[ ] Should try for slow-updating video stills & hand-recognizing touches, authentication via the app, an emergency button that auto-dials a bunch of people with a prerecorded message after a timeout with a very audible/visible note to Thatha with the option to cancel. 
[ ] Etc. - "can't hear," "can't see," etc. with pings to ME
[ ] For now, focus on Skype voice. It's annoying to get it working within the same router subnet so use a phone in each house to get this tested. JUST VOICE - Intents, etc. But get sound across in real time.

[ ] Transfer notes from last few days &  prioritize features.
[ ] Write a basic client app that takes the bitmap via a get request of text, and unpacks it into a bitmap. Time it!!  

[ ] Noticed that if the tablet charges completely down it's a ROYAL pain to get booted - just tell them how to power down/up and make sure they don't let it run dry, and that they know to call you if it does do that.
	[ ] https://productforums.google.com/forum/#!topic/nexus/oTvwcpKxAdE
[*] Noticed that I can't log into the server remotely and start up this app - if I do & it seems to bind port 80 but the app can't talk to the server!
	[*] **lol, forgot to connect to wifi. No duh I have an IO exception - I should notify the user if this is the case!!**
	[*] try the server business again - yep, no problem

[ ] Work on a basic http get app for the receiver as well (build for my phone)
[ ] Add in VoIP demo to me alone

[ ] Notes on ScreenMeet/doodle app
	[ ] wow, that looked great, but it had up to 13 seconds delay from the tablet to the phone (i'm just assuming their servers are in USA, so it's a good estimate for my app too).
	[ ] it's absolutely doing a diff of some kind, and they allow a speed/quality tradeoff - when just handwriting in a doodling app where most things stayed the same there was 1 second delay at most, and sometimes much less
	[ ] I can do diffs really easy because I only have to deal with binary images - just subtract the old and new bitmap, and encode THAT, and handle clear separately
	[ ] this only helps if processing is a negligible fraction of the time spend on this
	[ ] I should absolutely test whether the server speeds up if it has to do less processing there itself - and hey, android can just separately deal with rendering, i could up my resolution a lot this way (another thing the screen share has on me is that it seems to have a larger transfer window - but I need to see what my 200x200 looks like scaled to the phone window..)
	[ ] I also found a few sites saying I'm using the wrong libraries and it could be seriously slowing down my networking 
		[ ] https://developer.android.com/training/articles/perf-tips.html#ObjectCreation
		[ ] https://www.toptal.com/android/top-10-most-common-android-development-mistakes

[ ] I think it'd be worth as a first pass putting in a "done" button so Thatha can tell Amma he's done writing, or at least to put in some kind of two way communication so he knows when she's seen what he's written. Maybe something as simple as a counter that resets every time there's a diff in the JSON string. 
[ ] Ok, well, I should try out free/paid options to see what kind of lag they have, and see what DeadSimpleScreenSharing lag is, and then look into ways of speeding this up. I mean, clearly, the post-processing is the killer - though in fairness, the network traffic is taking that second, not the processing. Timing will help resolve this stuff, pinpoint where to focus effort.

[ ] Issues noted with drawing so far:
	[ ] Sound is VERY low - how's VoIP going to work? Get an app.. but then need one with an API, or set it up and make sure they know not to mess with it.
	[ ] Perhaps an indexing method (diff, unique id, and handshake) will make sure thatha doesn't erase early. It might also lower spurious updates. Perhaps the webserver is having timing issues too, and this will help resolve them (don't send unnecessarily if nothing has changed). 
	[ ] Be careful to use solid/striped or something other than red/green as colors are hard to tell apart I bet as we get older.
	[ ] DISABLE auto-turn off when this app is on!! 
	[ ] Don't check for connectivity. What happens if I don't have it?
	[ ] Timing on the transmits - is it actually finishing the thread run() in 1 second or less?
	[ ] What happens to the server if I pass in bad JSON or a string without the necessary field?
	[ ] Home, Switch buttons are fine, don't erase drawing. Back button erases drawing. Probably too much of a pain to remove them.
	[ ] Might want to move erase button to top so Thatha has no chance of accidentally bringing in notification screen and exiting out. Try it with him.
	[ ] Line width is fine. Dots are a bit difficult. Should see if he gets used to it. 
	[ ] Even with hand resting against tablet, because screen doesn't go to edges, no push factor here. Especially snce he's right handed.
	[ ] Disable back button.
[ ] Don't know what this does to size of the message. Need to check Amazon EC2 usage, and can also store logs of this sort of information on the server - timing between observed requests, and classification of the requests to see if even the server sees loss or overlap or other weird timing.
[ ] Putting unique indexes (large, large wrapping #) on these messages may help order them so they can be displayed well despite the slow update. I can also have talkback so the app knows if its message has been received by Amma.

[ ] Aesthetics - usability - home buttons, see how Thatha uses the tablet, make it easier for his use. How to avoid recognizing his hand pressure as a press in the doodle? Look for open-source doodle code with APIs if possible to grab the screen..
[ ] Remote control of Tablet - Remote Update of App - App without Developer Mode
[ ] Flashing light to say "sent" so Thatha knows when he can clear - and send before clear so it's on record. Allow scrolling of saved sessions in real time so Amma can review notes.
[ ] Add in VoIP to Amma, Balu mama, Vikram, Suman, ... 
[ ] Make VoIP optional in case of low bandwidth
[ ] Add save-session features for client app?
[ ] Webserver security & authentication
	[ ] Size limits on post data
	[ ] Post, not put, as otherwise RLE images stored in browser..
[ ] Cleanup last file so no local data exists on server.
[ ] Look into RPi2 webserver hosting & port forwarding, and network monitoring for security. 






